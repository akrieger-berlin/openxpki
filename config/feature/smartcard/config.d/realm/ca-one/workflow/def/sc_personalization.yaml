head:
    prefix: scpers
    label: I18N_OPENXPKI_UI_WORKFLOW_TYPE_SMARTCARD_PERSONALIZATION_LABEL
    description: I18N_OPENXPKI_UI_WORKFLOW_TYPE_SMARTCARD_PERSONALIZATION_DESC

state:
    APPROVAL: 
        autorun: 1
        action: 
          - approve_wf > all_approvals_present
          - reject_wf > FAILURE

    BEGIN_LOOP_NEED_CSR: 
        autorun: 1
        action: 
          - global_noop > GET_NEXT_NEED_CSR ? !temp_list_empty
          - global_noop2 > CSR_DONE ? temp_list_empty

    CAN_ISSUE: 
        autorun: 1
        action: 
          - global_noop > NEXT_CSR_TO_ISSUE ? !all_certs_issued
          - global_noop2 > CERTIFICATE_ISSUANCE_DONE ? all_certs_issued

    CERTIFICATE_ISSUANCE_DONE: 
        autorun: 1
        action: 
          - register_user_information > USER_INFO_REGISTERED

    CERTIFICATE_ISSUANCE_POSSIBLE: 
        autorun: 1
        action: 
          - global_noop > NEED_PUK ? !allow_user_PIN will_need_PIN
          - global_noop2 > PIN_MISSING ? allow_user_PIN will_need_PIN
          - global_noop3 > PIN_CONTINUE ? !will_need_PIN

    CERTS_DELETED:
        autorun: 1
        action: 
          - global_noop > QUEUE_FOR_REVOCATION

    CERTS_PUBLISHED: 
        autorun: 1
        action: 
          - global_noop > QUEUE_FOR_DEPUBLICATION


    CERTS_QUEUED_FOR_DELETION: 
        autorun: 1
        action: 
          - global_noop > CERTS_DELETED ? all_certs_deleted
          - next_cert_to_delete > HAVE_CERT_TO_DELETE ? !all_certs_deleted

    CERTS_QUEUED_FOR_DEPUBLICATION: 
        autorun: 1
        action: 
          - global_noop > CERT_DELETE_CHECK ? all_certs_unpublished
          - next_cert_to_unpublish unpublish_certificate > CERTS_QUEUED_FOR_DEPUBLICATION ? !all_certs_unpublished

    CERTS_QUEUED_FOR_PUBLICATION: 
        autorun: 1
        action: 
          - global_noop > CERTS_PUBLISHED ? all_certs_published
          - next_cert_to_publish publish_certificate > CERTS_QUEUED_FOR_PUBLICATION ? !all_certs_published

    CERTS_QUEUED_FOR_REVOCATION:
        autorun: 1
        action: 
          - cleanup_workflow > SUCCESS ? all_certs_revoked
          - next_cert_to_revoke revoke_certificate > CERTS_QUEUED_FOR_REVOCATION ? !all_certs_revoked

    CERT_DELETE_CHECK: 
        autorun: 1
        action: 
          - queue_certs_to_delete > CERTS_QUEUED_FOR_DELETION

    CERT_INST_CHECK: 
        autorun: 1
        action: 
          - global_noop > WHICH_CERT_TO_INSTALL ? !all_certs_installed
          - global_noop2 > INSTALL_CERTIFICATE_DONE ? all_certs_installed

    CERT_IN_DATAPOOL: 
        autorun: 1
        action: 
          - push_cert_to_issuance_queue > CERT_QUEUED

    CERT_ISSUED:
        autorun: 1
        action: 
          - register_cert_in_datapool > CERT_IN_DATAPOOL
 
    CERT_QUEUED: 
        autorun: 1
        action: 
          - global_noop > NEW_ESCROW_CERT_ISSUED ? has_escrow_key_to_rename
          - global_noop2 > CAN_ISSUE ? !has_escrow_key_to_rename

    CERT_RETRIEVED: 
        autorun: 1
        action: 
          - calculate_key_id > KEY_ID_COMPUTED


    CERT_TO_INSTALL:
        action: 
          - cert_inst_err > CERT_TO_INSTALL
          - fetch_puk > CERT_TO_INSTALL
          - cert_inst_ok > CERT_INST_CHECK
          - fail_workflow > FAILURE

    CSRS_TO_PROCESS: 
        autorun: 1
        action: 
          - global_noop > APPROVAL ? workflow_approval_needed
          - global_noop2 > PERSIST_CSRS ? !workflow_approval_needed

    CSR_AVAIL: 
        autorun: 1
        action: 
          - apply_csr_policy > QUEUE_CSR_TO_ISSUE

    CSR_DONE: 
        autorun: 1
        action: 
          - global_noop > CSRS_TO_PROCESS ? csrs_to_process
          - global_noop2 > CERTIFICATE_ISSUANCE_DONE ? !csrs_to_process

    ESCROW_CERT_TO_INSTALL: 
        autorun: 1
        action: 
          - global_noop > CERT_INST_CHECK ? !private_key_exists_in_datapool
          - global_noop2 > PKCS12_TO_INSTALL ? private_key_exists_in_datapool

    FAILURE: 
        label: I18N_OPENXPKI_UI_WORKFLOW_STATE_FAILURE_LABEL
        description: I18N_OPENXPKI_UI_WORKFLOW_STATE_FAILURE_DESC

    FETCH_CERTIFICATE: 
        autorun: 1
        action: 
          - fetch_certificate > CERT_RETRIEVED

    GET_NEXT_NEED_CSR: 
        autorun: 1
        action: 
          - get_next_need_csr > HAVE_NEXT_NEED_CSR

    HAVE_CERT_TO_DELETE: 
        action: 
          - fail_workflow > FAILURE
          - fetch_puk > HAVE_CERT_TO_DELETE
          - cert_del_ok > CERTS_QUEUED_FOR_DELETION
          - cert_del_err > HAVE_CERT_TO_DELETE

    HAVE_COMPUTED_PUK: 
        autorun: 1
        action: 
          - global_noop > HAVE_WRITABLE_PUK ? can_set_puk
          - global_noop2 > FAILURE ? !can_set_puk

    HAVE_GENERATED_PUK: 
        autorun: 1
        action: 
          - global_noop > PUK_TO_INSTALL ? generated_puk_ok
          - global_noop2 > FAILURE ? !generated_puk_ok

    HAVE_NEXT_NEED_CSR: 
        autorun: 1
        action: 
          - global_noop > NEED_ESCROW_KEY ? is_escrow_csr
          - global_noop2 > NEED_NON_ESCROW_CSR ? !is_escrow_csr

    HAVE_PREREQS: 
        autorun: 1
        action: 
          - chip_id_mismatch_err > FAILURE ? smartchip_id_mismatch
          - global_noop > CERTIFICATE_ISSUANCE_POSSIBLE ? smartcard_status_activated !smartchip_id_mismatch
          - global_noop2 > CERTIFICATE_ISSUANCE_POSSIBLE ? is_badge_officer smartcard_status_initial !smartcard_status_activated !smartchip_id_mismatch
          - auth_err > FAILURE ? !is_badge_officer smartcard_status_initial !smartcard_status_activated !smartchip_id_mismatch
          - status_err > FAILURE ? !smartcard_status_initial !smartcard_status_activated !smartchip_id_mismatch

    HAVE_PUK: 
        autorun: 1
        action: 
          - global_noop > START_ACTIONS

    HAVE_WRITABLE_PUK: 
        autorun: 1
        action: 
          - generate_puk > HAVE_GENERATED_PUK

    INITIAL: 
        action: 
          - initialize > INITIALIZED

    INITIALIZED: 
        autorun: 1
        action: 
          - check_prereqs_via_api > PREREQS_AVAILABLE

    INSTALL_CERTIFICATE_DONE: 
        autorun: 1
        action: 
          - queue_issued_certs_for_publication queue_installed_certs_for_publication > CERTS_QUEUED_FOR_PUBLICATION

    ISSUE_CERT: 
        autorun: 1
        action: 
          - issue_certificate > CERT_ISSUED

    KEY_ESCROWED: 
        autorun: 1
        action: 
          - create_pkcs12 > PKCS12_CREATED

    KEY_ID_COMPUTED: 
        autorun: 1
        action: 
          - global_noop > X509_PREPARED ? !is_escrow_cert
          - global_noop2 > ESCROW_CERT_TO_INSTALL ? is_escrow_cert

    NEED_ESCROW_CSR: 
        autorun: 1
        action: 
          - create_escrow_csr > CSR_AVAIL

    NEED_ESCROW_KEY: 
        autorun: 1
        action: 
          - create_escrowed_key > NEED_ESCROW_CSR

    NEED_NON_ESCROW_CSR: 
        action: 
          - post_non_escrow_csr_err > NEED_NON_ESCROW_CSR
          - fetch_puk > NEED_NON_ESCROW_CSR
          - fail_workflow > FAILURE
          - post_non_escrow_csr > CSR_AVAIL

    NEED_PUK: 
        autorun: 1
        action: 
          - global_noop > HAVE_PUK ? puk_found_in_datapool
          - global_noop2 > NO_STORED_PUK_AVAIL ? !puk_found_in_datapool

    NEW_ESCROW_CERT_ISSUED: 
        autorun: 1
        action: 
          - rename_key > CAN_ISSUE

    NEXT_CSR_TO_ISSUE: 
        autorun: 1
        action: 
          - next_csr_to_issue > ISSUE_CERT

    NO_STORED_PUK_AVAIL: 
        autorun: 1
        action: 
          - compute_puk > HAVE_COMPUTED_PUK

    PERSIST_CSRS: 
        autorun: 1
        action: 
          - persist_csrs > PREPARE_CSRS_TO_PROCESS

    PIN_CONTINUE: 
        autorun: 1
        action: 
          - global_noop > START_ACTIONS

    PIN_MISSING: 
        action: 
          - fail_workflow > FAILURE
          - gui_has_pin > PIN_CONTINUE
          - user_abort > FAILURE

    PKCS12_CREATED: 
        autorun: 1
        action: 
          - clear_passwords > PKCS12_TO_INSTALL

    PKCS12_PARAMETERS_SET: 
        autorun: 1
        action: 
          - escrow_private_key > KEY_ESCROWED

    PKCS12_PASSWORD_ENCRYPTED: 
        autorun: 1
        action: 
          - set_p12_parameters > PKCS12_PARAMETERS_SET

    PKCS12_TO_INSTALL: 
        action: 
          - cert_inst_err > PKCS12_TO_INSTALL
          - refetch_p12 > PREPARE_ESCROW_CERT_INSTALLATION
          - fetch_puk > PKCS12_TO_INSTALL
          - fail_workflow > FAILURE
          - cert_inst_ok > CERT_INST_CHECK

    POLICY_INPUT_REQUIRED: 
        action: 
          - apply_csr_policy > QUEUE_CSR_TO_ISSUE
          - fail_workflow > FAILURE
          - fetch_puk > POLICY_INPUT_REQUIRED

    PREPARE_CSRS_TO_PROCESS: 
        autorun: 1
        action: 
          - copy_csr_serials > CAN_ISSUE

    PREPARE_ESCROW_CERT_INSTALLATION: 
        autorun: 1
        action: 
          - create_pkcs12_password > PKCS12_PASSWORD_ENCRYPTED

    PREREQS_AVAILABLE: 
        autorun: 1
        action: 
          - set_workflow_attributes > HAVE_PREREQS

    PUK_TO_INSTALL: 
        action: 
          - fail_workflow > FAILURE
          - puk_write_err > PUK_TO_INSTALL
          - fetch_puk > PUK_TO_INSTALL
          - puk_write_ok > HAVE_PUK

    QUEUE_CERTS_TO_RECOVER: 
        autorun: 1
        action: 
          - queue_certs_to_recover_for_installation > CERT_INST_CHECK

    QUEUE_CSR_TO_ISSUE: 
        autorun: 1
        action: 
          - queue_csr_to_issue > BEGIN_LOOP_NEED_CSR ? !policy_input_required
          - global_noop > POLICY_INPUT_REQUIRED ? policy_input_required
    QUEUE_FOR_DEPUBLICATION:
        autorun: 1
        action: 
          - queue_certs_to_unpublish > CERTS_QUEUED_FOR_DEPUBLICATION

    QUEUE_FOR_REVOCATION: 
        autorun: 1
        action: 
          - queue_certs_to_revoke > CERTS_QUEUED_FOR_REVOCATION

    START_ACTIONS: 
        autorun: 1
        action: 
          - init_tmp_list_csr > BEGIN_LOOP_NEED_CSR

    SUCCESS: 
        label: I18N_OPENXPKI_UI_WORKFLOW_STATE_SUCCESS_LABEL
        description: I18N_OPENXPKI_UI_WORKFLOW_STATE_SUCCESS_DESC

    USER_INFO_REGISTERED: 
        autorun: 1
        action: 
          - queue_issued_certs_for_installation > QUEUE_CERTS_TO_RECOVER

    WHICH_CERT_TO_INSTALL: 
        autorun: 1
        action: 
          - fetch_cert_id_to_install > FETCH_CERTIFICATE

    X509_PREPARED: 
        autorun: 1
        action: 
          - set_cert_type_to_x509 > CERT_TO_INSTALL


action:
    apply_csr_policy: 
        class: OpenXPKI::Server::Workflow::Activity::SmartCard::ApplyCSRPolicy
        input: 
          - login_ids
          - pkcs10

    approve_wf: 
        class: Workflow::Action::Null

    auth_err: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::SetErrorCode
        param: 
            error_code: Smartcard state requires badge officer to continue

    calculate_key_id: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::CalculateKeyId
        input: 
          - certificate
        param: 
            output_key: keyid

    cert_del_err: 
        class: Workflow::Action::Null
        input: 
          - sc_error_reason

    cert_del_ok: 
        class: Workflow::Action::Null

    cert_inst_err: 
        class: Workflow::Action::Null
        input: 
          - sc_error_reason

    cert_inst_ok: 
        class: Workflow::Action::Null

    check_prereqs_via_api: 
        class: OpenXPKI::Server::Workflow::Activity::SmartCard::CheckPrereqs

    chip_id_mismatch_err: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::SetErrorCode
        param: 
            error_code: Smartcard chip id mismatch

    cleanup_workflow: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::SetContext
        param: 
            SetContextParameters: overwritecontext
            _keypassword: OpenXPKI
            cert_install_type: "" 
            certificate: "" 
            pkcs10: ""
            temp_key_handle: ""
            cert_identifier: ""
            cert_install_type: ""
            cert_issuance_data: ""	
            certificate: ""
            csr_cert_type: ""
            csr_serial: ""
            certs_on_card: ""

    clear_passwords: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::SetContext
        param: 
            SetContextParameters: overwritecontext
            _keypassword: 

    compute_puk: 
        class: OpenXPKI::Server::Workflow::Activity::SmartCard::ComputePUK
        input: 
          - chip_id
          - token_id
        param: 
            description: Obtain PUK for given Smartcard (possibly only a default value, or a computation based on token_id or chip_id)

    copy_csr_serials: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::SetContext
        input: 
          - csr_serial
        param: 
            SetContextParameters: overwritecontext,extendedsyntax
            _map_tmp_queue: $csr_serial

    create_escrow_csr: 
        class: Workflow::Action::Null
        input: 
          - pkcs10

    create_escrowed_key: 
        class: OpenXPKI::Server::Workflow::Activity::SmartCard::CreateEscrowedKey
        param: 
            dp_namespace: certificate.privatekey
            _map_dp_key: $token_id
            key_alg: RSA
            key_size: 1024
            enc_alg: aes256

    create_pkcs12: 
        class: OpenXPKI::Server::Workflow::Activity::SmartCard::CreatePKCS12
        param: 
            _map_passin: $_keypassword
            _map_passout: $_password
            _map_certificate: $certificate
            _map_privatekey: $_private_key

    create_pkcs12_password: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::GeneratePassword
        param: 
            password_length: 20

    escrow_private_key: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::Datapool::GetEntry
        input: 
          - cert_identifier
        param: 
            description: Retrieve encryption certificate from database
            ds_key_param: cert_identifier
            ds_namespace: certificate.privatekey
            ds_value_param: _private_key

    fail_workflow: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::SetErrorCode
        param: 
            error_code: failed_by_administrator

    fetch_cert_id_to_install: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        input: 
          - tmp_queue
        param: 
            array_name: tmp_queue
            context_key: cert_identifier
            function: shift

    fetch_certificate: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::RetrieveCertificate
        input: 
          - cert_identifier
        param: 
            certstatus: ANY

    fetch_puk: 
        class: OpenXPKI::Server::Workflow::Activity::SmartCard::FetchPUK
        param: 
            ds_default_value: $smartcard_default_puk
            ds_key_param: token_id
            ds_namespace: smartcard.puk
            ds_value_param: _puk

    generate_puk: 
        class: OpenXPKI::Server::Workflow::Activity::SmartCard::GeneratePUK
        input: 
          - _default_puk

    get_next_need_csr: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        input: 
          - tmp_queue
        param: 
            array_name: tmp_queue
            context_key: csr_cert_type
            function: shift

    gui_has_pin: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::SetErrorCode
        param: 
            error_code: User would not enter password

    init_tmp_list_csr: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::SetContext
        input: 
          - certs_to_create
        param: 
            SetContextParameters: overwrite,extendedsyntax
            _map_tmp_queue: $certs_to_create

    initialize: 
        class: Workflow::Action::Null
        input: 
          - certs_on_card
          - chip_id
          - token_id
          - user_id

    issue_certificate: 
        class: OpenXPKI::Server::Workflow::Activity::NICE::IssueCertificate
        param: 
            retry_count: 10
            retry_interval: +0000000030

    next_cert_to_delete: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        input: 
          - tmp_queue
        param: 
            array_name: tmp_queue
            context_key: keyid
            function: shift

    next_cert_to_publish: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        input: 
          - tmp_queue
        param: 
            array_name: tmp_queue
            context_key: cert_identifier
            function: shift

    next_cert_to_revoke: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        input: 
          - tmp_queue
        param: 
            array_name: tmp_queue
            context_key: cert_identifier
            function: shift

    next_cert_to_unpublish: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        input: 
          - tmp_queue
        param: 
            array_name: tmp_queue
            context_key: cert_identifier
            function: shift

    next_csr_to_issue: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        input: 
          - tmp_queue
        param: 
            array_name: tmp_queue
            context_key: csr_serial
            function: shift

    persist_csrs: 
        class: OpenXPKI::Server::Workflow::Activity::SmartCard::PersistCSRs
        input: 
          - cert_issuance_data

    post_non_escrow_csr: 
        class: Workflow::Action::Null
        input: 
          - keyid
          - pkcs10
        validator:
          - global_pkcs10_valid

    post_non_escrow_csr_err: 
        class: Workflow::Action::Null
        input: 
          - sc_error_reason
  
    publish_certificate: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::PublishCertificate
# if you want to fork a new workflow for each publication, use this class instead
#       class: OpenXPKI::Server::Workflow::Activity::Tools::TriggerCertificatePublish
        input: 
          - cert_identifier
        param: 
            export_context: 1
            _map_publish_key: userinfo_mail

    puk_write_err: 
        class: Workflow::Action::Null
        input: 
          - sc_error_reason

    puk_write_ok: 
        class: Workflow::Action::Null

    push_cert_to_issuance_queue: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        param: 
            array_name: certs_issued
            context_key: cert_identifier
            function: push

    queue_issued_certs_for_publication: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        param: 
            array_name: tmp_queue
            context_key: certs_issued
            function: pusharray

    queue_installed_certs_for_publication: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        param: 
            array_name: tmp_queue
            context_key: certs_to_install
            function: pusharray


    queue_certs_to_delete: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        input: 
          - certs_to_delete
        param: 
            array_name: tmp_queue
            context_key: certs_to_delete
            function: pusharray

    queue_certs_to_recover_for_installation: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        input: 
          - certs_to_install
        param: 
            array_name: tmp_queue
            context_key: certs_to_install
            function: pusharray

    queue_certs_to_revoke: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        input: 
          - certs_to_revoke
        param: 
            array_name: tmp_queue
            context_key: certs_to_revoke
            function: pusharray

    queue_certs_to_unpublish: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        input: 
          - certs_to_unpublish
        param: 
            array_name: tmp_queue
            context_key: certs_to_delete
            function: pusharray

    queue_csr_to_issue: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        input: 
          - csr_id
        param: 
            array_name: csrs_to_issue
            context_key: csr_id
            function: pusharray

    queue_issued_certs_for_installation: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::WFArray
        input: 
          - certs_issued
        param: 
            array_name: tmp_queue
            context_key: certs_issued
            function: pusharray

    refetch_p12: 
        class: Workflow::Action::Null

    register_cert_in_datapool: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::Datapool::AppendToEntry
        param: 
            ds_encrypt: 0
            ds_force: 0
            ds_key_param: userinfo_employee_id
            ds_namespace: smartcard.user.certificate
            ds_value_param: cert_identifier

    register_user_information: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::Datapool::SetEntry
        input: 
          - userinfo_currentid
          - userinfo_employee_id
        param: 
            ds_encrypt: 0
            ds_force: 1
            ds_key_param: userinfo_employee_id
            ds_namespace: smartcard.user.currentid
            ds_value_param: userinfo_currentid

    reject_wf: 
        class: Workflow::Action::Null

    rename_key: 
        class: OpenXPKI::Server::Workflow::Activity::SmartCard::RenameEscrowedKey
        input: 
          - cert_identifier
        param: 
            ds_namespace: certificate.privatekey

    revoke_certificate: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::RevokeCertificate
        input: 
          - cert_identifier
        param: 
            flag_auto_approval: 1
            reason_code: superseded

    set_cert_type_to_x509: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::SetContext
        param: 
            SetContextParameters: overwritecontext
            cert_install_type: x509

    set_p12_parameters: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::SetContext
        param: 
            SetContextParameters: overwritecontext
            _keypassword: OpenXPKI
            cert_install_type: p12

    set_workflow_attributes: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::SetAttribute
        param: 
            _map_token_id: $token_id
            _map_card_owner: $userinfo_card_owner

    status_err: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::SetErrorCode
        param: 
            error_code: Smartcard state neither activated nor initial

    unpublish_certificate: 
        class: Workflow::Action::Null
        input: 
          - cert_identifier

    user_abort: 
        class: OpenXPKI::Server::Workflow::Activity::Tools::SetErrorCode
        param: 
            error_code: User would not enter password


condition:
    all_certs_deleted: 
        class: OpenXPKI::Server::Workflow::Condition::WFArray
        param: 
            array_name: tmp_queue
            condition: is_empty

    all_certs_installed: 
        class: OpenXPKI::Server::Workflow::Condition::WFArray
        param: 
            array_name: tmp_queue
            condition: is_empty

    all_certs_issued: 
        class: OpenXPKI::Server::Workflow::Condition::WFArray
        param: 
            array_name: tmp_queue
            condition: is_empty

    all_certs_published: 
        class: OpenXPKI::Server::Workflow::Condition::WFArray
        param: 
            array_name: tmp_queue
            condition: is_empty

    all_certs_revoked: 
        class: OpenXPKI::Server::Workflow::Condition::WFArray
        param: 
            array_name: tmp_queue
            condition: is_empty

    all_certs_unpublished: 
        class: OpenXPKI::Server::Workflow::Condition::WFArray
        param: 
            array_name: tmp_queue
            condition: is_empty

    allow_user_PIN: 
        class: OpenXPKI::Server::Workflow::Condition::WorkflowContext
        param: 
            condition: equals
            context_key: flag_allow_user_pin
            context_value: yes

    can_set_puk: 
        class: OpenXPKI::Server::Workflow::Condition::WorkflowContext
        param: 
            condition: equals
            context_key: flag_puk_is_writable
            context_value: yes

    csrs_to_process: 
        class: OpenXPKI::Server::Workflow::Condition::WorkflowContext
        param: 
            condition: exists
            context_key: cert_issuance_data

    generated_puk_ok: 
        class: OpenXPKI::Server::Workflow::Condition::WorkflowContext
        param: 
            condition: equals
            context_key: generated_new_puk
            context_value: yes

    has_escrow_key_to_rename: 
        class: OpenXPKI::Server::Workflow::Condition::WFHash
        param: 
            condition: key_nonempty
            ds_key: $csr_serial
            hash_name: cert_escrow_handle

    is_badge_officer: 
        class: OpenXPKI::Server::Workflow::Condition::WorkflowContext
        param: 
            condition: equals
            context_key: flag_is_badge_officer
            context_value: yes

    is_escrow_cert: 
        class: OpenXPKI::Server::Workflow::Condition::DatapoolEntry
        param: 
            condition: notnull
            datapool_key: $cert_identifier
            datapool_namespace: certificate.privatekey

    is_escrow_csr: 
        class: OpenXPKI::Server::Workflow::Condition::Connector::IsValue
        param: 
            _map_config_path: smartcard.policy.certs.type.[% context.csr_cert_type %].escrow_key
            value: 1

    policy_input_required: 
        class: OpenXPKI::Server::Workflow::Condition::WorkflowContext
        param: 
            condition: notnull
            context_key: policy_input_required

    private_key_exists_in_datapool: 
        class: OpenXPKI::Server::Workflow::Condition::DatapoolEntry
        param: 
            condition: notnull
            datapool_key: $cert_identifier
            datapool_namespace: certificate.privatekey

    puk_found_in_datapool: 
        class: OpenXPKI::Server::Workflow::Condition::WorkflowContext
        param: 
            condition: equals
            context_key: flag_puk_found_in_datapool
            context_value: yes

    smartcard_status_activated: 
        class: OpenXPKI::Server::Workflow::Condition::WorkflowContext
        param: 
            condition: equals
            context_key: smartcard_status
            context_value: activated

    smartcard_status_initial: 
        class: OpenXPKI::Server::Workflow::Condition::WorkflowContext
        param: 
            condition: equals
            context_key: smartcard_status
            context_value: initial

    smartchip_id_mismatch: 
        class: OpenXPKI::Server::Workflow::Condition::WorkflowContext
        param: 
            condition: equals
            context_key: smartcard_token_chipid_match
            context_value: mismatch

    temp_list_empty: 
        class: OpenXPKI::Server::Workflow::Condition::WFArray
        param: 
            array_name: tmp_queue
            condition: is_empty

    will_need_PIN: 
        class: OpenXPKI::Server::Workflow::Condition::WorkflowContext
        param: 
            condition: equals
            context_key: flag_will_need_pin
            context_value: yes

    workflow_approval_needed: 
        class: OpenXPKI::Server::Workflow::Condition::WorkflowContext
        param: 
            condition: equals
            context_key: flag_need_approval
            context_value: yes


field:
    _default_puk: 
        name: _default_puk
        type: text
        required: 0

    _keypassword: 
        name: _keypassword
        required: 1
        type: text

    _password: 
        name: _password
        required: 1
        type: text

    _private_key: 
        name: _private_key
        required: 1
        type: text

    cert_identifier: 
        name: cert_identifier
        required: 1
        type: text

    cert_issuance_data: 
        name: cert_issuance_data
        required: 1
        type: text

    certificate: 
        name: certificate
        required: 1
        type: text

    certs_issued: 
        name: certs_issued
        type: text
        required: 0

    certs_on_card: 
        name: certs_on_card
        type: text
        required: 0

    certs_to_create: 
        name: certs_to_create
        required: 1
        type: text

    certs_to_delete: 
        name: certs_to_delete
        type: text
        required: 0

    certs_to_install: 
        name: certs_to_install
        required: 1
        type: text

    certs_to_publish: 
        name: certs_to_publish
        type: text
        required: 0

    certs_to_revoke: 
        name: certs_to_revoke
        type: text
        required: 0

    certs_to_unpublish: 
        name: certs_to_unpublish
        type: text
        required: 0

    chip_id: 
        name: chip_id
        type: text
        required: 0

    csr_id: 
        name: csr_id
        type: text
        required: 0

    csr_serial: 
        name: csr_serial
        required: 1
        type: text

    keyid: 
        name: keyid
        required: 1
        type: text

    login_ids: 
        name: login_ids
        type: text
        required: 0

    pkcs10: 
        name: pkcs10
        required: 1
        type: text

    sc_error_reason: 
        name: sc_error_reason
        required: 1
        type: text

    tmp_queue: 
        name: tmp_queue
        required: 1
        type: text

    token_id: 
        name: token_id
        required: 1
        type: text

    user_id: 
        name: user_id
        type: text
        required: 0

    userinfo_currentid: 
        name: userinfo_currentid
        required: 1
        type: text

    userinfo_employee_id: 
        name: userinfo_employee_id
        required: 1
        type: text

acl:

    CA Operator: 
        creator: any

    RA Operator: 
        creator: any
        fail: 1
        resume: 1
        wakeup: 1

    SmartCard:
        creator: any
 
